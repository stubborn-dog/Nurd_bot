import datetime, math, re, random, calendar
from colorama import *
from data_file import subjects, answers, non_static_subjects,carols, anecdote, functions_for_non_static_subjects

list_of_topics = (', '.join(subjects.keys())).split(", ")
list_of_help_functions = ["допомога", "назад", "вихід"]
topic_history = []
n = '\n'

# ----------------------------------------Functions for saving the file-------------------------------------------------

# Function for getting data about time

def get_file_time():
    date = datetime.datetime.now()
    file_name = f'dialog-{date.strftime("%y-%m-%d-%H-%M")}.txt'
    return file_name


file_name = get_file_time()

# Starting saving process
with open(file_name, 'a', encoding='utf-8') as f:
    pass

# function which saves prints from bot to file
def print_bots_response(text, file_output=True):
    text_with_colour = Fore.YELLOW + '[Ньорд]: ' + Style.RESET_ALL
   #           -----> |making text yellow|       |reseting all styles for following text|
    if file_output:
        with open(file_name, 'a', encoding='utf-8') as f:
            f.write('[Ньорд]:' + ' ' + re.sub('\033\[[^m]*m', '', text) + '\n\n')
    #                                          >>>>ANSII code
    print(f'{text_with_colour} {text}')


# function which saves users input to file
def get_user_input():
    coloured_input = input(f"{Fore.LIGHTCYAN_EX + '[Користувач]: ' + Style.RESET_ALL}")
    with open(file_name, 'a', encoding='utf-8') as f:
        f.write("[Користувач]:" + re.sub('\033\[[^m]*m', '', coloured_input) + '\n\n')
    return coloured_input

# ---------------------Technical functions-----------------------------


def to_exit():
    print_bots_response("Дякую, що порозмовляли зі мною!")
    quit()


def to_continue():
    print_bots_response("Бажаєте, продовжити та обрати нову тему(Так\Ні): ")
    users_decision = get_user_input()
    if users_decision.lower() in list_of_help_functions:
        go_help_fun(users_decision)
    elif (users_decision.lower()).strip() == "ні":
        to_exit()
    elif (users_decision.lower()).strip() == "так":
        print_bots_response(f"""Оберіть предмет:\n{n.join(["  * " + item for item in subjects])}""")
        add_to_the_list_of_topics(get_user_input())
    else:
        print_bots_response(f"\nЯ вас не розумію, ваша відповідь — '{users_decision}'. Спробуйте, будь ласка, ще раз.")
        to_continue()


def go_help_fun(text):
    if text == "назад":
        topic = get_previous_topic()
        if topic == None:
            topic_history.clear()
            greet_user()
        else:
            topic_history.pop(topic_history.index(topic))
            add_to_the_list_of_topics(topic)
    elif text == "вихід":
        to_exit()
    elif text == "допомога":
        print_help()
    else:
        pass


def get_previous_topic():
    if len(topic_history) == 1 or len(topic_history) == 0:
        return None
    else:
        topic_history.pop(-1)
        return topic_history[-1]


def print_help():
    help_message = ""
    if len(topic_history) == 0:
        pass
    else:
        help_message += f"""Ви обрали операцію «{topic_history[-1]}»"""

    help_message += f"""\nДля виходу, напишіть «вихід».\nДля повернення до останньої теми напишіть «назад»."""
    print_bots_response(help_message)
    to_continue()


def check_users_input(text, my_list):
    if text.lower() in list_of_help_functions:
        go_help_fun(text)
        return None
    elif text not in my_list:
        print_bots_response(f'Ви ввели некоректні дані — "{text}", будь ласка, спробуйте ще раз.')
        return False
    else:
        return True

# ---------------------Semi-technical functions-----------------------------


def greet_user():
    print_bots_response(f"""
Вітаю, мене звати Ньорд. Ви можете задати мені питання з наступних тем:
{n.join(["  * " + item for item in subjects])}
    """)
    add_to_the_list_of_topics(get_user_input())


def add_to_the_list_of_topics(subject):
    if check_users_input(subject, subjects):
        topic_history.append(subject)
        choose_topic(subject)
    else:
        print_bots_response(f'\nОберіть предмет:\n{n.join(["  * " + item for item in subjects])}')
        add_to_the_list_of_topics(get_user_input())


def choose_topic(text):
    print_bots_response(f'Обраний розділ:{text}\nОберіть, будь ласка, тему:\n{n.join(["  * " + item for item in subjects[text]])}')
    users_choice = get_user_input()
    if check_users_input(users_choice, subjects[text]):
        give_answer(text, users_choice)
    else:
        choose_topic(text)


def give_answer(subject, topic):
    answer = subjects[subject].index(topic)
    if topic in non_static_subjects[subject]:
        eval(functions_for_non_static_subjects[topic])
    else:
        print_bots_response(f"\n[Ньорд]: \n{topic}: {answers[subject][answer]}")
        to_continue()


# ----------------------------------------Functions for non-static answers----------------------------------------------


#-------------------------Functions for the main topics--------------------------------------


def mathematics_with_calculations(subject, topic):
    a = get_the_data()
    list_of_x = [float(x) for x in a[0]]
    list_of_y = [float(y) for y in a[1]]
    print_bots_response(f"\n[Ньорд]: \nx0 = {(int(list_of_x[0]) + int(list_of_x[1])) / 2}")
    print_bots_response(f"\n[Ньорд]: \ny0 = {(int(list_of_y[0]) + int(list_of_y[1])) / 2}")
    to_continue()


def geography_with_calculations():
    a = get_the_data()
    list_of_x = [float(x) for x in a[0]]
    list_of_y = [float(y) for y in a[1]]
    response = '\nВаш азимут дорівнює:'

    # x_start, y_start, x_end, y_end
    def find_the_asymuth(x_1, x_2, y_1, y_2):
        # Calculate the differences between the coordinates of the points along the x and y axes
        dx = x_2 - x_1
        dy = y_2 - y_1
        if dx == 0:
            # If the difference in x is 0, evaluate the sign of the difference in y
            if dy > 0:
                # If the difference in y is greater than 0, the azimuth value is 0
                print_bots_response(f"{response} 0°")
                to_continue()
            elif dy < 0:
                # If the difference in y is less than 0, the azimuth value is 180
                print_bots_response(f"\n{response} 180°")
                to_continue()
        elif dy == 0:
            # If the difference in y is 0, evaluate the sign of the difference in x
            if dx > 0:
                # If the difference in x is greater than 0, the azimuth value is 90
                print_bots_response(f"\n{response} 90°")
                to_continue()
            elif dx < 0:
                # If the difference in x is less than 0, the azimuth value is 270
                print_bots_response(f"\n{response} 270°")
                to_continue()
        else:
            tan = dy / dx
            # Calculate the arctangent of the tangent of the angle between the points
            angle = math.atan(tan)
            # Convert radians to degrees
            angle_degree = math.degrees(angle)
            if dx < 0:
                # If the difference in x is negative, add 180 degrees to the angle value
                print_bots_response(f"\nYour azimuth is: {180 + round(angle_degree, 3)}° ")
                to_continue()
            else:
                print_bots_response(f"\nYour azimuth is: {round(angle_degree, 3)}° ")
                to_continue()

    find_the_asymuth(list_of_x[0], list_of_x[1], list_of_y[0], list_of_y[1])



def get_the_data():
    list_of_x = []
    list_of_y = []
    restart = True
    r = 2
    c = 0

    def check_the_data(x, y):
        try:
            float(x) and float(y)
            return True
        except ValueError:
            return False

    while restart:
        for i in range(r):
            print_bots_response(f"\nВведіть значення точки x{i + 1 + c}: ")
            x = get_user_input()
            print_bots_response(f"\nВведіть значення точки y{i + 1 + c}: ")
            y = get_user_input()
            restart = False
            if check_the_data(x, y):
                list_of_x.append(x)
                list_of_y.append(y)
                if len(list_of_x) == 2 and len(list_of_y) == 2:
                    return [[list_of_x[0], list_of_x[1]], [list_of_y[0], list_of_y[1]]]
            else:
                print_bots_response(f"\nВи ввели некоректне значення, будь ласка, спробуйте ще раз")
                if i == 0:
                    r = 2
                else:
                    r = 1
                    c = 1
                restart = True
                break


#---------------------------------Functions for the additional topics-----------------------

def sing_carol():
    print_bots_response(f"""Яку з поданих нижче колядок ви хочете почути: \n{n.join([' * ' + carol for carol in carols])}""")
    chosen_carol = get_user_input()
    if check_users_input(chosen_carol, carols):
        print_bots_response(f'{chosen_carol}: {carols[chosen_carol]}')
        to_continue()
    else:
        sing_carol()


def tell_anecdote():
    random_anecdote = random.choice(anecdote)
    print_bots_response(random_anecdote)
    anecdote.pop(anecdote.index(random_anecdote))
    while len(anecdote) > 0:
        print_bots_response("Бажаєте ще один анекдот(так\ні)?")
        users_choice = get_user_input()
        if check_users_input(users_choice, ["так", "ні"]):
            if users_choice == "так":
                tell_anecdote()
            else:
                print_bots_response(f"Гарно посміялися...Шкода, що ти не хочеш почути ще, бо в мене їх ще {len(anecdote)} є")
                break
        else:
            continue #asking the user again wether he wants to return to the beginning of the cycle"

    else:
        print_bots_response("Вибачай немає вже анекдотів. Все тобі розпатякав!!!")

    to_continue()


def tell_the_date():
    current_date = datetime.date.today().strftime("%d.%m.%Y")#getting the date
    print_bots_response(current_date)
    to_continue()


def show_calender():
    # Get the current date
    current_date = datetime.date.today()

    # Get the Ukrainian names of weekdays
    ukrainian_weekdays = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Нд']

    # Function to format a day with red highlighting for the current date
    def format_day(day, weekday):
        if day == current_date.day:
            return f"\033[31m{day}\033[0m"
        if day != 0:
            return str(day)
        return " "
    print_bots_response("\n")
    # Print the header with the names of weekdays
    print(" ".join(weekday for weekday in ukrainian_weekdays))

    # Print the calendar with the current date highlighted and Ukrainian names of weekdays
    cal = calendar.monthcalendar(current_date.year, current_date.month)
    formatted_cal = [[format_day(day, ukrainian_weekdays[idx]) for idx, day in enumerate(week)] for week in cal]

    for week in formatted_cal:
        print(" ".join(str(day).rjust(2) for day in week))
    to_continue()


greet_user()
